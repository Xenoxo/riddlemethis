what to work on next:

Regarding changing the color of the upvote button

***********************************

onClick for the button should call a method that no only calls the method to change 
the internal state (inc/dec  vote by 1) but will also get the returned value from that
and change the state of the component, which will reflect via the className

AKA

onClick = newmethod

newmethod {
  1. calls the meteor method to update votes by 1 which also returns whether voted or not as (TRUE/FALSE)
  2. using the above return, change the state of the component
  
}

className = conditional based on the State value

***********************************
NEW THING Notes from Meteor Meetup
***********************************
const ready = Meteor.subscribe(w/e)

during the return: ready.isReady()

Container > Page > Component

Gets data > layout of the Page > Renders specific things

* redux
* redux dev tools
* redux-form
* redux selectors
* chromatic
* apollo stack
* meteor guide

***********************************



|------------------------ IDEAL STRUCTURE BELOW ---------------------|

imports/
  startup/
    client/
      index.js                 # import client startup through a single index entry point
      routes.js                # set up all routes in the app
      useraccounts-configuration.js # configure login templates
    server/
      fixtures.js              # fill the DB with example data on startup
      index.js                 # import server startup through a single index entry point

  api/
    lists/                     # a unit of domain logic
      server/
        publications.js        # all list-related publications
        publications.tests.js  # tests for the list publications
      lists.js                 # definition of the Lists collection
      lists.tests.js           # tests for the behavior of that collection
      methods.js               # methods related to lists
      methods.tests.js         # tests for those methods

  ui/
    components/                # all reusable components in the application
                               # can be split by domain if there are many
    layouts/                   # wrapper components for behaviour and visuals
    pages/                     # entry points for rendering used by the router

client/
  main.js                      # client entry point, imports all client code

server/
  main.js                      # server entry point, imports all server code
